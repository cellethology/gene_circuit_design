experiments:
  # 1. Pre-computed PCA results (from one-hot encoding)
  onehot_pca_experiment:
    data_path: "data/166k_data/166k_rice/post_embeddings/pca_results_32cores.safetensors"
    strategies: ["HIGH_EXPRESSION", "RANDOM", "LOG_LIKELIHOOD"]
    seq_mod_methods: ["EMBEDDING"]  # Use EMBEDDING to load pre-computed PCA from safetensors
    regression_models: ["LINEAR", "KNN", "RANDOM_FOREST"]
    seeds: [42, 123]
    initial_sample_size: 8
    batch_size: 8
    test_size: 30
    max_rounds: 5
    normalize_expression: true
    no_test: true
    # use_pca: true  # Remove this since PCA is already applied
    # pca_components: 4096  # Remove this since PCA is already applied
    output_dir: "results/final_test/onehot_pca"
    cores_per_process: 4

  # 2. Embedding-based experiments with 10 replicates
  evo_embeddings_replicates:
    data_path: "data/166k_data/166k_rice/post_embeddings/all_tensor_data.safetensors"
    strategies: ["HIGH_EXPRESSION", "RANDOM", "LOG_LIKELIHOOD"]
    seq_mod_methods: ["EMBEDDING"]
    regression_models: ["LINEAR", "KNN", "RANDOM_FOREST"]
    seeds: [42, 123]
    initial_sample_size: 8
    batch_size: 8
    test_size: 30
    max_rounds: 5
    normalize_expression: true
    no_test: true
    output_dir: "results/final_test/evo_embeddings_replicates"
    cores_per_process: 4

  # 3. Enformer template (to be filled in later)
  enformer_template:
    data_path: "data/166k_data/166k_rice/post_embeddings/all_embeddings_parallel_enformer_with_expressions.safetensors"  # Update with actual path
    strategies: ["HIGH_EXPRESSION", "RANDOM"]
    seq_mod_methods: ["EMBEDDING"]  # You'll need to implement this in sequence_utils.py
    regression_models: ["XGBOOST", "LINEAR", "KNN", "RANDOM_FOREST"]
    seeds: [1,2,3,4,5,6,7,8,9,10]
    initial_sample_size: 8
    batch_size: 8
    test_size: 30
    max_rounds: 20
    normalize_expression: true
    no_test: true
    output_dir: "results/enformer/enformer_first_10_seeds"
